version: '3.7'

services:
  traefik:
    image: traefik:v2.2
    hostname: traefik
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/acme.json:/root/acme.json
      - /root/credentials.txt:/root/credentials.txt
    ports:
      - 80:80
      - 443:443
    command:
      # entry points
      - --api=true
      - --ping=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # docker
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      # tls certificates
      - --certificatesresolvers.secure.acme.httpchallenge=true
      - --certificatesresolvers.secure.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.secure.acme.email=${MAIL_ADDRESS}
      - --certificatesresolvers.secure.acme.storage=/root/acme.json
    healthcheck:
      test: CMD traefik healthcheck
    labels:
      - traefik.enable=true
      # dashboard
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.rule=Host(`monitor.testing-stage.org`)
      - traefik.http.routers.traefik.tls.certresolver=secure
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.auth.basicauth.usersfile=/root/credentials.txt
      # https redirect
      - traefik.http.routers.detour.rule=hostregexp(`{host:[a-z-.]+}`)
      - traefik.http.routers.detour.entrypoints=web
      - traefik.http.routers.detour.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
  db:
    image: registry.thiloilg.com/root/blicc/db:test
    hostname: db
    restart: always
  redis:
    image: registry.thiloilg.com/root/blicc/redis:test
    hostname: redis
    restart: always
  mongo:
    image: registry.thiloilg.com/root/blicc/mongo:test
    hostname: mongo
    restart: always
  rabbitmq:
    image: registry.thiloilg.com/root/blicc/rabbitmq:test
    hostname: rabbitmq
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq.rule=Host(`messaging.testing-stage.org`)
      - traefik.http.routers.rabbitmq.tls.certresolver=secure
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
  api:
    image: registry.thiloilg.com/root/blicc/api:test
    hostname: api
    restart: always
    volumes:
      - /root/rsa.pem:/root/certs/rsa.pem
      - /root/rsa_pub.pem:/root/certs/rsa_pub.pem
    depends_on:
      - db
      - rabbitmq
      - storage
      - redis
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - ADMIN_MAIL=${ADMIN_MAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MAIL_ADDRESS=${MAIL_ADDRESS}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_HOST=${MAIL_HOST}
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.testing-stage.org`)
      - traefik.http.routers.api.tls.certresolver=secure
  delivery:
    image: registry.thiloilg.com/root/blicc/delivery:test
    hostname: delivery
    restart: always
    volumes:
      - /root/rsa_pub.pem:/root/certs/rsa_pub.pem
    depends_on:
      - redis
      - mongo
      - mock-api
    environment:
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - APP_ORIGIN=${APP_ORIGIN}
    labels:
      - traefik.enable=true
      - traefik.http.routers.delivery.rule=Host(`delivery.testing-stage.org`)
      - traefik.http.routers.delivery.tls.certresolver=secure
      - traefik.http.routers.delivery.middlewares=sslheader
  mock-api:
    image: registry.thiloilg.com/root/blicc/mock-api:test
    hostname: mock_api
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.mock-api.rule=Host(`mock.testing-stage.org`)
      - traefik.http.routers.mock-api.tls.certresolver=secure
  storage:
    image: registry.thiloilg.com/root/blicc/storage:test
    hostname: storage
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.storage.rule=Host(`storage.testing-stage.org`)
      - traefik.http.routers.storage.tls.certresolver=secure
      - traefik.http.services.storage.loadbalancer.server.port=9000
