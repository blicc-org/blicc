stages:
  - build
  - test-preparation
  - test
  - deploy
  - seed

variables:
  REGISTRY: $CI_REGISTRY/$CI_PROJECT_PATH
  VERSION: $CI_COMMIT_SHORT_SHA

.enable_ssh: &enable_ssh |
  which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
  eval $(ssh-agent -s)
  echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh && chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

.install_openssl: &install_openssl |
  apk add --update openssl
  rm -rf /var/cache/apk/*

build:
  stage: build
  image: docker:git
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t app -f ./app/prod.Dockerfile ./app
    - docker build
      --build-arg POSTGRES_USERNAME=$POSTGRES_USERNAME
      --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      --shm-size=2gb
      -t api -f ./api/prod.Dockerfile ./api
    - docker build
      --build-arg POSTGRES_USERNAME=$POSTGRES_USERNAME
      --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      -t db ./db
    - docker build
      --build-arg MONGODB_USERNAME=$MONGODB_USERNAME
      --build-arg MONGODB_PASSWORD=$MONGODB_PASSWORD
      -t mongo ./mongo
    - docker build
      --build-arg MONGODB_USERNAME=$MONGODB_USERNAME
      --build-arg MONGODB_PASSWORD=$MONGODB_PASSWORD
      -t delivery -f ./delivery/prod.Dockerfile ./delivery
    - docker build -t redis ./redis
    - docker build
      -t mock-api -f ./mock-api/prod.Dockerfile ./mock-api
    - docker build
      --build-arg RABBITMQ_COOKIE=$RABBITMQ_COOKIE
      --build-arg RABBITMQ_USERNAME=$RABBITMQ_USERNAME
      --build-arg RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD
      -t rabbitmq ./rabbitmq
    - docker build
      --build-arg MINIO_USERNAME=$MINIO_USERNAME
      --build-arg MINIO_PASSWORD=$MINIO_PASSWORD
      -t storage ./storage

    - docker tag app $REGISTRY/app:$VERSION
    - docker tag api $REGISTRY/api:$VERSION
    - docker tag db $REGISTRY/db:$VERSION
    - docker tag redis $REGISTRY/redis:$VERSION
    - docker tag mongo $REGISTRY/mongo:$VERSION
    - docker tag mock-api $REGISTRY/mock-api:$VERSION
    - docker tag delivery $REGISTRY/delivery:$VERSION
    - docker tag rabbitmq $REGISTRY/rabbitmq:$VERSION
    - docker tag storage $REGISTRY/storage:$VERSION

    - docker push $REGISTRY/app:$VERSION
    - docker push $REGISTRY/api:$VERSION
    - docker push $REGISTRY/db:$VERSION
    - docker push $REGISTRY/redis:$VERSION
    - docker push $REGISTRY/mongo:$VERSION
    - docker push $REGISTRY/mock-api:$VERSION
    - docker push $REGISTRY/delivery:$VERSION
    - docker push $REGISTRY/rabbitmq:$VERSION
    - docker push $REGISTRY/storage:$VERSION

test-preparation:
  stage: test-preparation
  image: node:12
  before_script:
    - *enable_ssh
    - apt-get -y update
    - apt-get -y install apache2-utils
  script:
    - ssh -tt root@$TEST_IP "docker image prune -a -f"
    - ssh -tt root@$TEST_IP "echo $(htpasswd -nb $TRAEFIK_USERNAME $TRAEFIK_PASSWORD) | sed -e s/\\$/\\$\\$/g > /root/credentials.txt"
    - scp -r ./docker-compose.testing-stage.yml root@$TEST_IP:/root/docker-compose.yml
    - openssl genrsa -out rsa.pem 2048
    - openssl rsa -in rsa.pem -outform PEM -pubout -out rsa_pub.pem
    - scp -r rsa.pem root@$TEST_IP:/root/rsa.pem
    - scp -r rsa_pub.pem root@$TEST_IP:/root/rsa_pub.pem
    - ssh -tt root@$TEST_IP "export
      VERSION=$VERSION
      DOCKER_CLIENT_TIMEOUT=120
      COMPOSE_HTTP_TIMEOUT=120
      POSTGRES_USERNAME=$POSTGRES_USERNAME
      POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      MONGODB_USERNAME=$MONGODB_USERNAME
      MONGODB_PASSWORD=$MONGODB_PASSWORD
      RABBITMQ_COOKIE=$RABBITMQ_COOKIE
      RABBITMQ_USERNAME=$RABBITMQ_USERNAME
      RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD
      MINIO_USERNAME=$MINIO_USERNAME
      MINIO_PASSWORD=$MINIO_PASSWORD
      ADMIN_MAIL=$ADMIN_MAIL
      ADMIN_PASSWORD=$ADMIN_PASSWORD
      MAIL_ADDRESS=$MAIL_ADDRESS
      MAIL_PASSWORD=$MAIL_PASSWORD
      APP_ORIGIN=$APP_ORIGIN
      MAIL_HOST=$MAIL_HOST &&
      echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose down &&
      docker-compose up -d --force-recreate --remove-orphans"
    - for ((;;)); do curl -s $API_TEST_TARGET > /dev/null && break; sleep 1; done
    - for ((;;)); do curl -s $DELIVERY_TEST_TARGET > /dev/null && break; sleep 1; done

test-api:
  stage: test
  image: node:12
  script:
    - yarn
    - yarn --cwd 'api' cross-env API_TEST_TARGET=$API_TEST_TARGET jest

test-delivery:
  stage: test
  image: golang:1.13
  script:
    - cd ./delivery/tests && go test .

deploy:
  stage: deploy
  image: docker:git
  only:
    - master
  before_script:
    - *enable_ssh
    - *install_openssl
    - apt-get -y update
    - apt-get -y install apache2-utils
  script:
    - ssh -tt root@PROD_IP "echo $(htpasswd -nb $TRAEFIK_USERNAME $TRAEFIK_PASSWORD) | sed -e s/\\$/\\$\\$/g > /root/credentials.txt"
    - scp -r ./docker-compose.prod.yml root@$PROD_IP:/root/docker-compose.yml
    - openssl genrsa -out rsa.pem 2048
    - openssl rsa -in rsa.pem -outform PEM -pubout -out rsa_pub.pem
    - scp -r rsa.pem root@$PROD_IP:/root/rsa.pem
    - scp -r rsa_pub.pem root@$PROD_IP:/root/rsa_pub.pem
    - scp -r rsa.pem root@$PROD_IP_2:/root/rsa.pem
    - scp -r rsa_pub.pem root@$PROD_IP_2:/root/rsa_pub.pem
    - ssh -tt root@$PROD_IP "export
      VERSION=$VERSION
      DOCKER_CLIENT_TIMEOUT=120
      COMPOSE_HTTP_TIMEOUT=120
      POSTGRES_USERNAME=$POSTGRES_USERNAME
      POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      MONGODB_USERNAME=$MONGODB_USERNAME
      MONGODB_PASSWORD=$MONGODB_PASSWORD
      RABBITMQ_COOKIE=$RABBITMQ_COOKIE
      RABBITMQ_USERNAME=$RABBITMQ_USERNAME
      RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD
      MINIO_USERNAME=$MINIO_USERNAME
      MINIO_PASSWORD=$MINIO_PASSWORD
      ADMIN_MAIL=$ADMIN_MAIL
      ADMIN_PASSWORD=$ADMIN_PASSWORD
      MAIL_ADDRESS=$MAIL_ADDRESS
      MAIL_PASSWORD=$MAIL_PASSWORD
      APP_ORIGIN=$APP_ORIGIN
      MAIL_HOST=$MAIL_HOST &&
      echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
      docker stack deploy --prune --resolve-image always --with-registry-auth -c docker-compose.yml blicc"

plugins:
  stage: seed
  image: node:12
  only:
    - master
  before_script:
    - *enable_ssh
    - git submodule sync --recursive plugins
    - git submodule update --init --recursive --checkout --force plugins
  script:
    - yarn --cwd 'plugins'
    - yarn --cwd 'plugins' deploy
