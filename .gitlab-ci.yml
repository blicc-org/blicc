stages:
  - build
  - test
  - deploy

variables:
  IP: 195.201.39.96
  REGISTRY_DOMAIN: registry.thiloilg.com
  REPO: blicc

.enable_ssh: &enable_ssh |
  which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
  eval $(ssh-agent -s)
  echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

.login_docker: &login_docker |
  docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  image: docker:git
  before_script:
    - *login_docker
  script:
    - docker build -t app ./app
    - docker build --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD -t api ./api/prod.Dockerfile
    - docker build --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD -t db ./db
    - docker build --build-arg MONGODB_PASSWORD=$MONGODB_PASSWORD -t mongo ./mongo
    - docker build --build-arg MONGODB_PASSWORD=$MONGODB_PASSWORD -t delivery ./delivery
    - docker build -t redis ./redis

    ## tag and deploy for testing stage
    - docker tag api $REGISTRY_DOMAIN/repo/$REPO/api-testing-stage
    - docker tag db $REGISTRY_DOMAIN/repo/$REPO/db-testing-stage
    - docker tag redis $REGISTRY_DOMAIN/repo/$REPO/redis-testing-stage
    - docker push $REGISTRY_DOMAIN/repo/$REPO/api-testing-stage
    - docker push $REGISTRY_DOMAIN/repo/$REPO/db-testing-stage
    - docker push $REGISTRY_DOMAIN/repo/$REPO/redis-testing-stage

    ## tag for production
    - docker tag api $REGISTRY_DOMAIN/repo/$REPO/api
    - docker tag db $REGISTRY_DOMAIN/repo/$REPO/db
    - docker tag mongo $REGISTRY_DOMAIN/repo/$REPO/mongo
    - docker tag redis $REGISTRY_DOMAIN/repo/$REPO/redis
    - docker tag app $REGISTRY_DOMAIN/repo/$REPO/app
    - docker tag delivery $REGISTRY_DOMAIN/repo/$REPO/delivery

test:
  stage: test
  image: node:12
  before_script:
    - *enable_ssh
  script:
    - ssh -tt root@$TEST_IP "docker image prune -a -f"
    - scp -r ./docker-compose.test.yml root@$TEST_IP:/root/docker-compose.yml
    - ssh -tt root@$TEST_IP "export
      POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      CI_REGISTRY=$CI_REGISTRY
      CI_REGISTRY_USER=$CI_REGISTRY_USER
      CI_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD
      ADMIN_MAIL=$ADMIN_MAIL
      ADMIN_PASSWORD=$ADMIN_PASSWORD
      MAIL_ADDRESS=$MAIL_ADDRESS
      MAIL_PASSWORD=$MAIL_PASSWORD
      MAIL_HOST=$MAIL_HOST &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose down &&
      docker-compose up -d --force-recreate --remove-orphans"
    - for ((;;)); do curl -s $API_TEST_TARGET > /dev/null && break; sleep 1; done
    - yarn
    - yarn --cwd 'api' cross-env API_TEST_TARGET=$API_TEST_TARGET jest

deploy:
  stage: deploy
  image: docker:git
  only:
    - master
  before_script:
    - *login_docker
    - *enable_ssh
  script:
    - ssh -tt root@$IP "docker image prune -a -f"
    - docker push $REGISTRY_DOMAIN/repo/$REPO/app
    - docker push $REGISTRY_DOMAIN/repo/$REPO/api
    - docker push $REGISTRY_DOMAIN/repo/$REPO/db
    - docker push $REGISTRY_DOMAIN/repo/$REPO/mongo
    - docker push $REGISTRY_DOMAIN/repo/$REPO/redis
    - docker push $REGISTRY_DOMAIN/repo/$REPO/delivery
    - scp -r ./docker-compose.prod.yml root@$IP:/root/docker-compose.yml
    - ssh -tt root@$IP "openssl genrsa -out rsa.pem 2048"
    - ssh -tt root@$IP "openssl rsa -in rsa.pem -outform PEM -pubout -out rsa_pub.pem"
    - ssh -tt root@$IP "export
      POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      MONGODB_PASSWORD=$MONGODB_PASSWORD
      CI_REGISTRY=$CI_REGISTRY
      CI_REGISTRY_USER=$CI_REGISTRY_USER
      CI_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD
      ADMIN_MAIL=$ADMIN_MAIL
      ADMIN_PASSWORD=$ADMIN_PASSWORD
      MAIL_ADDRESS=$MAIL_ADDRESS
      MAIL_PASSWORD=$MAIL_PASSWORD
      MAIL_HOST=$MAIL_HOST &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose down &&
      docker-compose up -d --force-recreate --remove-orphans"

plugins:
  stage: deploy
  image: node:12
  only:
    - master
  before_script:
    - *enable_ssh
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - yarn --cwd 'plugins'
    - yarn --cwd 'plugins' deploy
